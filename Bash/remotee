#!/usr/bin/env bash

fit() { onefite fit $* 2>onefite.log | tee fit-results.txt; }

GNUPLOT() { gnuplot -p -e "set term qt font 'Arial,12'; set logscale xy; set xtics 10; set ytics 10; set xrange [1e3:1e9]; set yrange [0.1:10]; plot '-' using 1:2 with points pt 2 title 'T1'"; }

AWK() { awk -v x="$1" -v y="$2" -F', ' '!/#/ && NF>0  {print $x, 1/$y}'; }


AVERAGE() { raku -e 'my %a=(); $*IN.lines.grep(/\w/).map({ %a{.words.head}.push: .words.skip(1) }); %a.map({ .key => gather for 0 ..^ .value[0].elems -> $i { take .value.map(*[$i]).sum/.value.elems }}).sort({ .key.Num }).join(":").Str.subst(/\s+/," ",:g).subst(":","\n",:g).say'; }

JQ() { jq ".\"$1\"" $2 | sed -e 's/\\n/\n/g' -e "s/\"//g" | tee $3 }

plot() { AWK  $1 $2 | GNUPLOT; }

rfit() { 
# Check usage
	if [[ $# -lt 1 ]]; then
    	echo "Usage: $0 fit [function] [args...]"
    	exit 1
	fi
	
	IP="127.0.0.1"
	WORKFOLDER=""

	fitresults="fit-results.txt" 								# fit results file
	data="cT11T12.txt"											# data for gnuplot
	folder=ofe-tmp
	basename=upload
# Extract base info
	ACTION="fit"
#	shift
#	FUNCTION=$1
#	shift
	BASE_URL="http://$IP:8142/fit"
	ARCHIVE="$basename.zip"

# Linux and MacOS
	ZIP='zip -jq'
	UNZIP="unzip -joq $folder.zip -d $folder"
	OPEN="open"

# MS Windows winget install -e --id 7zip.7zip; winget install jqlang.jq:
#	ZIP="7z a -tzip"
#	UNZIP="7z e $folder.zip -o$folder"
#	OPEN="explorer"

# Start command as array
	CMD=(curl "$BASE_URL")

# Separate flags and files
	FILES_TO_ARCHIVE=()
	NOARCHIVE=0

	for arg in "$@"; do
    	if [[ "$arg" == --* ]]; then
        	FLAG="${arg#--}"
        	CMD+=(-F "\"$FLAG=yes\"")
    	elif [[ "$arg" == a:* ]] || [[ "$arg" == *=* ]]; then
			CMD+=(-F "\"function=$arg\"")
		elif [[ "$arg" == *.sav ]] || [[ "$arg" == *.json ]]; then
			NOARCHIVE=1
			FILE="$arg"
			basename="${arg%.*}"
		else
        	FILES_TO_ARCHIVE+=("$arg")
    	fi
	done

# Create archive if files exist
	if [[ "$NOARCHIVE" == 1 ]]; then 
       	CMD+=(-F "\"file=@$FILE\"")
	else
		if [[ ${#FILES_TO_ARCHIVE[@]} -gt 0 ]]; then
    		echo "Archiving: ${FILES_TO_ARCHIVE[*]}" >&2
			eval "rm $ARCHIVE"
    		eval "$ZIP $ARCHIVE ${FILES_TO_ARCHIVE[@]} >/dev/null"

    		if [[ -f "$ARCHIVE" ]]; then
        		CMD+=(-F "\"file=@$ARCHIVE\"")
    		else
        		echo "Failed to create archive."
    		fi
		fi
	fi	

	CMD+=(-F "\"download=zip\"")
	CMD+=(--silent)
	CMD+=(--output ofe-tmp.zip)

# Run the command
	echo "Running: ${CMD[*]}" >&2
#"${CMD[@]}"
	eval "rm -fr $folder"
	eval "${CMD[*]}"

	eval "$UNZIP" 											# unzip OFE zip file with file paths removed (-j) to folder OFE 
	JQ "fit-results" "$folder/$basename.json" $fitresults 	# read fit-results fiedl from the jason file, insert newlines and remove '"' 
}

